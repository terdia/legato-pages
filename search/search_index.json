{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to the legato framework!\n\n\nLegato is a simple yet powerful PHP framework for rapid application development that is suited for small to medium scale apps and APIs.\n\n\nLegato framework is a seamless integration of powerful PHP packages from Symfony Components, illuminate, etc. with high performance.\n\n\nWho is Legato For?\n\n\nLegato is for PHP developers who want to build apps instead of \ncoding common things like validation, routing, database \nmanipulation, etc. from scratch. Legato offers a set of \nwell-defined toolkits that take care of those things allowing \nyou to focus on building your app.\n\n\nLegato is right for you if:\n\n\n\n\nYou want a framework with a small footprint\n\n\nYou want a framework that is easy to use.\n\n\nYou need exceptional performance.\n\n\nYou want a framework that requires nearly zero configuration.\n\n\nYou want a framework that provides multiple options for template engines or using plain PHP.\n\n\nYou prefer simple solutions.",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-the-legato-framework",
            "text": "Legato is a simple yet powerful PHP framework for rapid application development that is suited for small to medium scale apps and APIs.  Legato framework is a seamless integration of powerful PHP packages from Symfony Components, illuminate, etc. with high performance.",
            "title": "Welcome to the legato framework!"
        },
        {
            "location": "/#who-is-legato-for",
            "text": "Legato is for PHP developers who want to build apps instead of \ncoding common things like validation, routing, database \nmanipulation, etc. from scratch. Legato offers a set of \nwell-defined toolkits that take care of those things allowing \nyou to focus on building your app.  Legato is right for you if:   You want a framework with a small footprint  You want a framework that is easy to use.  You need exceptional performance.  You want a framework that requires nearly zero configuration.  You want a framework that provides multiple options for template engines or using plain PHP.  You prefer simple solutions.",
            "title": "Who is Legato For?"
        },
        {
            "location": "/installation/",
            "text": "Installation Requirements:\n\n\n\n\nPHP 7.1\n\n\nComposer\n\n\n\n\nInstalling Legato is very simple, first ensure you have the right PHP version and composer installed then in your command prompt run:\n\n\n$ composer create-project legato/legato blog\n\n\nThe above command will create a new Legato project inside a new folder name blog, then: \n\n\n$ cd blog\n\n\nand then run \n\n\n$ composer dump-autoload\n\n\nRunning Your Project With VirtualHost\n\n\nThe entry point for your Legato framework project is the index.php file \nwhich located inside the public directory, of course, you're free to \nchange this according to your need. If you choose to follow the \ndefault setup, then you may need to create an entry in /etc/httpd/vhosts (for apache users on Linux) similar to the following:\n\n\n<VirtualHost *:80>\n\n    DocumentRoot /var/www/html/blog/public\n\n    ServerName example.com\n\n</VirtualHost>\n\n\n\n\nRestart Apache\n\n\n$ service httpd restsart\n\n\nNavigate to http://example.com, you should be able to view the app.\n\n\nRunning Your Project with PHP inbuilt server\n\n\nThis is the faster and easier way to start using Legato framework, to run Legato using the inbuilt php server do one of the following: \n\n\nDefault\n\n\nOpen the terminal and switch to your project root directory and then type the command below\n\n\nphp legato start\n \n\n\nThis will start a server which you can access at: \nhttp://localhost:8000\n\n\nif the server fails to start because it could not find the PHP executable, \nthen you may pass in the \n--path\n option to specify the path for your PHP executable \nfor example on a linux OS you may type \nwhich php\n to determine the path of your php \nexecutable in most cases it will be \n/usr/bin/php\n or simply \nphp\n. \n\n\nTo specify the path to your PHP executable type:\n\n\nphp legato start --path=/usr/bin/php\n\n\nSpecifying a Different Hostname\n\n\nif you wish to specify a different hostname you can pass in an \noptional hostname option to the start command like so:\n\n\nphp legato start --hostname=example.com\n\n\nmake sure to create the domain entry inside your hosts file like so:\n\n\n#hosts file\n127.0.0.1 example.com\n\n\n\n\nThis will start a php server which you can access at: \nhttp://example.com:8000\n\n\nSpecifying a Different Port number\n\n\nif you wish to specify a different port you can pass in an \noptional port option to the start command like so:\n\n\nphp Legato start --port=8009\n\n\nthis will start a php server which you can access at: \nhttp://localhost:8009\n\n\nSpecifying a Different Hostname and Port number\n\n\nif you wish to use a different hostname and port altogether then make sure to create the hostname entry inside your hosts file:\n\n\n#hosts file\n127.0.0.1 example.com\n\n\n\n\nthen issue the start command with both options, the order does not matter\n\n\nphp Legato start --hostname=example.com --port=8009\n\n\nWith all options\n\n\nphp Legato start --hostname=example.com --port=8009 --path=/usr/bin/php\n\n\nthis will start a php server which you can access at: \nhttp://example.com:8009\n\n\nRunning Your Project Without VirtualHost\n\n\nif you choose to run your project without VirtualHost, \nfor example, accessing it with http://localhost/blog/public \nthen ensure to update application css and javascript path from \n/css/all.css\n absolute to \ncss.all.css\n relative.",
            "title": "Installation"
        },
        {
            "location": "/installation/#installation-requirements",
            "text": "PHP 7.1  Composer   Installing Legato is very simple, first ensure you have the right PHP version and composer installed then in your command prompt run:  $ composer create-project legato/legato blog  The above command will create a new Legato project inside a new folder name blog, then:   $ cd blog  and then run   $ composer dump-autoload",
            "title": "Installation Requirements:"
        },
        {
            "location": "/installation/#running-your-project-with-virtualhost",
            "text": "The entry point for your Legato framework project is the index.php file \nwhich located inside the public directory, of course, you're free to \nchange this according to your need. If you choose to follow the \ndefault setup, then you may need to create an entry in /etc/httpd/vhosts (for apache users on Linux) similar to the following:  <VirtualHost *:80>\n\n    DocumentRoot /var/www/html/blog/public\n\n    ServerName example.com\n\n</VirtualHost>  Restart Apache  $ service httpd restsart  Navigate to http://example.com, you should be able to view the app.",
            "title": "Running Your Project With VirtualHost"
        },
        {
            "location": "/installation/#running-your-project-with-php-inbuilt-server",
            "text": "This is the faster and easier way to start using Legato framework, to run Legato using the inbuilt php server do one of the following:   Default  Open the terminal and switch to your project root directory and then type the command below  php legato start    This will start a server which you can access at:  http://localhost:8000  if the server fails to start because it could not find the PHP executable, \nthen you may pass in the  --path  option to specify the path for your PHP executable \nfor example on a linux OS you may type  which php  to determine the path of your php \nexecutable in most cases it will be  /usr/bin/php  or simply  php .   To specify the path to your PHP executable type:  php legato start --path=/usr/bin/php  Specifying a Different Hostname  if you wish to specify a different hostname you can pass in an \noptional hostname option to the start command like so:  php legato start --hostname=example.com  make sure to create the domain entry inside your hosts file like so:  #hosts file\n127.0.0.1 example.com  This will start a php server which you can access at:  http://example.com:8000  Specifying a Different Port number  if you wish to specify a different port you can pass in an \noptional port option to the start command like so:  php Legato start --port=8009  this will start a php server which you can access at:  http://localhost:8009  Specifying a Different Hostname and Port number  if you wish to use a different hostname and port altogether then make sure to create the hostname entry inside your hosts file:  #hosts file\n127.0.0.1 example.com  then issue the start command with both options, the order does not matter  php Legato start --hostname=example.com --port=8009  With all options  php Legato start --hostname=example.com --port=8009 --path=/usr/bin/php  this will start a php server which you can access at:  http://example.com:8009",
            "title": "Running Your Project with PHP inbuilt server"
        },
        {
            "location": "/installation/#running-your-project-without-virtualhost",
            "text": "if you choose to run your project without VirtualHost, \nfor example, accessing it with http://localhost/blog/public \nthen ensure to update application css and javascript path from  /css/all.css  absolute to  css.all.css  relative.",
            "title": "Running Your Project Without VirtualHost"
        },
        {
            "location": "/routing/",
            "text": "Legato Framework router is a simple implementation of AltoRouter use \nfor routing HTTP Request. \n\n\nWhere to Define Your Application Routes\n\n\nYou should define your routes inside routes.php file which is located in the routes folder when you install a fresh copy of Legato there will be one route defined like so \n\n\n\n<?php\n\n# routes/routes.php\n/**\n * Your application routes go here\n */\n\nuse Legato\\Framework\\Routing\\Route;\n\n/**\n    * @param target, \n    * @param handler, fully qualified classname and method or Closure \n    * @param name (optional) must be unique for each route, \n */\n\nRoute::get('/', 'App\\Controllers\\IndexController@show', 'homepage');\n\nRoute::get('/user/{id}', function ($id) {\n    echo 'Example route using closure '.$id;\n});\n\n\n\n\nRoute with Closure or Callback\n\n\nYou can also define a route that uses a Closure or callback as the handler like so\n\n\n\n<?php\n\nRoute::get('/user/[i:id]', function ($id) {\n    echo 'Example route using closure '.$id;\n});\n\n\n\n\n\nRoute Controller\n\n\n\n<?php\n\nRoute::post('/contact', 'App\\Controllers\\ContactController@save');\n\n\n\n\n\nWhen you define a controller route, you should also specify \nthe fully qualified name of a controller and method that \nwill be executed for example for the route /contact the \ncontroller is ContactController while the method to be \nexecuted is save, \nApp\\Controllers\\ContactController@save\n\n\nDefining GET Routes\n\n\n\n<?php\n/**\n    * @param target, \n    * @param handler, fully qualified classname and method or Closure \n    * @param name (optional) must be unique for each route, \n */\n\nRoute::get('/', 'App\\Controllers\\IndexController@show');\n\n\n\n\n\nDefining POST Routes\n\n\n\n<?php\n/**\n    * @param target, \n    * @param handler, fully qualified classname and method or Closure \n    * @param name (optional) must be unique for each route, \n */\n\nRoute::post('/contact', 'App\\Controllers\\ContactController@save', 'contact_use');\n\n\n\n\n\nThe Legato Route class supports all major HTTP Verbs (POST, GET, PUT, PATCH, DELETE) for example to create a route with PATCH HTTP verb simple do the following\n\n\n\n<?php \n/**\n    * @param target, \n    * @param handler, fully qualified classname and method or Closure \n    * @param name (optional) must be unique for each route, \n */\n\nRoute::patch('/profile', 'App\\Controllers\\ProfileController@update');\n\n\n\n\n\nDefining Route Group\n\n\n\n<?php\n\n/**\n    * @param target, \n    * @param handler, fully qualified classname and method or Closure \n    * @param name (optional) must be unique for each route, \n */\nRoute::group('/admin', array(\n    ['GET', '/post', 'App\\Controllers\\PostController@show'],\n\n    ['POST', '/post', 'App\\Controllers\\PostController@create'],\n\n    /**\n     * using closure within a route group\n     */\n    ['GET', '/post/delete/[i:id]', function($id) { \n        echo  'post with '. $id. ' deleted';\n    }],\n));\n\n\n\n\n\nDefining Route Resource\n\n\nIf you are using Legato 1.1.0 you can use the resource method \nto create RESTFul route\n\n\n<?php\n\nRoute::resource('/profile', 'ProfileController');\n\n\n\n\n\nthis will generate the following routes and expected methods:\n\n\n\nVerb       URI                       Method             Route Name\n\nGET        /profile                  index              profile_index\nGET        /profile/create           showCreateForm     profile_create_form\nPOST       /profile                  save               profile_save\nGET        /profile/[i:id]           show               profile_display\nGET        /profile/[i:id]/edit      showEditForm       profile_edit_form\nPOST       /profile/[i:id]           update             profile_update\nGET        /profile/[i:id]/delete    delete             profile_delete\n\n\n\n\n\nYou should then create all the methods in your controller, like so:\n\n\n\n<?php\n\nnamespace App\\Controllers;\n\nclass ProfileController extends BaseController\n{\n    /**\n    * display all profiles\n    */\n    public function index()\n    {\n        //\n    }\n\n    /**\n    * Display the form to create a \n    */\n    public function showCreateForm()\n    {\n        //\n    } \n\n    /**\n    * Save the resource  \n    */\n    public function save()\n    {\n        //\n    }\n\n    /**\n    * Display a specific resource \n    *   \n    * @param $id\n     */\n    public function show($id)\n    {\n        //\n    }\n\n    /**\n    * Show the form to edit the resource\n    * \n    * @param $id\n     */\n    public function showEditForm($id)\n    {\n\n    }\n\n    /**\n    * Update the specified resource\n    * \n    * @param $id\n     */\n    public function update($id)\n    {\n\n    }\n\n    /**\n    * Delete the specified resource\n    * \n    * @param $id\n     */\n    public function delete($id)\n    {\n\n    }\n}",
            "title": "Routing"
        },
        {
            "location": "/routing/#where-to-define-your-application-routes",
            "text": "You should define your routes inside routes.php file which is located in the routes folder when you install a fresh copy of Legato there will be one route defined like so   \n<?php\n\n# routes/routes.php\n/**\n * Your application routes go here\n */\n\nuse Legato\\Framework\\Routing\\Route;\n\n/**\n    * @param target, \n    * @param handler, fully qualified classname and method or Closure \n    * @param name (optional) must be unique for each route, \n */\n\nRoute::get('/', 'App\\Controllers\\IndexController@show', 'homepage');\n\nRoute::get('/user/{id}', function ($id) {\n    echo 'Example route using closure '.$id;\n});",
            "title": "Where to Define Your Application Routes"
        },
        {
            "location": "/routing/#route-with-closure-or-callback",
            "text": "You can also define a route that uses a Closure or callback as the handler like so  \n<?php\n\nRoute::get('/user/[i:id]', function ($id) {\n    echo 'Example route using closure '.$id;\n});",
            "title": "Route with Closure or Callback"
        },
        {
            "location": "/routing/#route-controller",
            "text": "<?php\n\nRoute::post('/contact', 'App\\Controllers\\ContactController@save');  When you define a controller route, you should also specify \nthe fully qualified name of a controller and method that \nwill be executed for example for the route /contact the \ncontroller is ContactController while the method to be \nexecuted is save,  App\\Controllers\\ContactController@save",
            "title": "Route Controller"
        },
        {
            "location": "/routing/#defining-get-routes",
            "text": "<?php\n/**\n    * @param target, \n    * @param handler, fully qualified classname and method or Closure \n    * @param name (optional) must be unique for each route, \n */\n\nRoute::get('/', 'App\\Controllers\\IndexController@show');",
            "title": "Defining GET Routes"
        },
        {
            "location": "/routing/#defining-post-routes",
            "text": "<?php\n/**\n    * @param target, \n    * @param handler, fully qualified classname and method or Closure \n    * @param name (optional) must be unique for each route, \n */\n\nRoute::post('/contact', 'App\\Controllers\\ContactController@save', 'contact_use');  The Legato Route class supports all major HTTP Verbs (POST, GET, PUT, PATCH, DELETE) for example to create a route with PATCH HTTP verb simple do the following  \n<?php \n/**\n    * @param target, \n    * @param handler, fully qualified classname and method or Closure \n    * @param name (optional) must be unique for each route, \n */\n\nRoute::patch('/profile', 'App\\Controllers\\ProfileController@update');",
            "title": "Defining POST Routes"
        },
        {
            "location": "/routing/#defining-route-group",
            "text": "<?php\n\n/**\n    * @param target, \n    * @param handler, fully qualified classname and method or Closure \n    * @param name (optional) must be unique for each route, \n */\nRoute::group('/admin', array(\n    ['GET', '/post', 'App\\Controllers\\PostController@show'],\n\n    ['POST', '/post', 'App\\Controllers\\PostController@create'],\n\n    /**\n     * using closure within a route group\n     */\n    ['GET', '/post/delete/[i:id]', function($id) { \n        echo  'post with '. $id. ' deleted';\n    }],\n));",
            "title": "Defining Route Group"
        },
        {
            "location": "/routing/#defining-route-resource",
            "text": "If you are using Legato 1.1.0 you can use the resource method \nto create RESTFul route  <?php\n\nRoute::resource('/profile', 'ProfileController');  this will generate the following routes and expected methods:  \nVerb       URI                       Method             Route Name\n\nGET        /profile                  index              profile_index\nGET        /profile/create           showCreateForm     profile_create_form\nPOST       /profile                  save               profile_save\nGET        /profile/[i:id]           show               profile_display\nGET        /profile/[i:id]/edit      showEditForm       profile_edit_form\nPOST       /profile/[i:id]           update             profile_update\nGET        /profile/[i:id]/delete    delete             profile_delete  You should then create all the methods in your controller, like so:  \n<?php\n\nnamespace App\\Controllers;\n\nclass ProfileController extends BaseController\n{\n    /**\n    * display all profiles\n    */\n    public function index()\n    {\n        //\n    }\n\n    /**\n    * Display the form to create a \n    */\n    public function showCreateForm()\n    {\n        //\n    } \n\n    /**\n    * Save the resource  \n    */\n    public function save()\n    {\n        //\n    }\n\n    /**\n    * Display a specific resource \n    *   \n    * @param $id\n     */\n    public function show($id)\n    {\n        //\n    }\n\n    /**\n    * Show the form to edit the resource\n    * \n    * @param $id\n     */\n    public function showEditForm($id)\n    {\n\n    }\n\n    /**\n    * Update the specified resource\n    * \n    * @param $id\n     */\n    public function update($id)\n    {\n\n    }\n\n    /**\n    * Delete the specified resource\n    * \n    * @param $id\n     */\n    public function delete($id)\n    {\n\n    }\n}",
            "title": "Defining Route Resource"
        },
        {
            "location": "/controller/",
            "text": "The controller is generally responsible for performing a request action.\n\n\nCreating a Controller\n\n\nYou can simply create a controller by using the Legato inbuilt \ncommand line tool or simply create a new file inside the controllers' \nfolder which is inside the app folder. If you use the command line \ntool then everything will be set up for automatically.\n\n\nUsing the command line tool\n\n\nTo create a controller with the command line tool, first, \nopen your terminal or command prompt for windows users then change \ndirectory to the root of your legato project\n\n\n$ cd /project/root/path\n\nthen type\n\n$ php Legato add:controller UserController\n\n\n\n\nThis will create a new class inside \napp/controllers\n like so, \n\n/app/controllers/UserController\n in the namespace namespace \nApp\\Controllers\n\n\n\n<?php\n\nnamespace App\\Controllers;\n\nclass UserController extends BaseController\n{\n\n}\n?>\n\n\n\n\n\nif you like to place your controller in a subfolder then do the following\n\n\n$ php Legato add:controller UserFolder/UserController\n\n\n\n\nThe location will be /app/controllers/UserFolder/UserController \n\n\nBaseControler\n\n\nAll controller should extend BaseController \n(this is already done for you if you created your controller using \nthe inbuilt command line tool) in other to have access to Request.\n\n\nYou can reference request like so\n\n\n\n<?php\n\n$request = $this->request; // contains the entire request object\n\n\n\n\n\nA more complete example\n\n\n\n<?php\n\nnamespace App\\Controllers;\n\nclass UserController extends BaseController\n{\n    public function show()\n    {\n        /**\n         * Retrieve value from request, used for both POST and GET request\n         */\n        $username = $this->request->input('username'); \n\n        /**\n         * Set a username session \n         */\n        session()->set('username', $username);\n\n        /**\n         * Get the value of the username session\n         */\n        $sessionUsername = session()->get('username');\n\n        view('home.twig', compact($sessionUsername));\n    }\n}",
            "title": "Controllers"
        },
        {
            "location": "/controller/#creating-a-controller",
            "text": "You can simply create a controller by using the Legato inbuilt \ncommand line tool or simply create a new file inside the controllers' \nfolder which is inside the app folder. If you use the command line \ntool then everything will be set up for automatically.",
            "title": "Creating a Controller"
        },
        {
            "location": "/controller/#using-the-command-line-tool",
            "text": "To create a controller with the command line tool, first, \nopen your terminal or command prompt for windows users then change \ndirectory to the root of your legato project  $ cd /project/root/path\n\nthen type\n\n$ php Legato add:controller UserController  This will create a new class inside  app/controllers  like so,  /app/controllers/UserController  in the namespace namespace  App\\Controllers  \n<?php\n\nnamespace App\\Controllers;\n\nclass UserController extends BaseController\n{\n\n}\n?>  if you like to place your controller in a subfolder then do the following  $ php Legato add:controller UserFolder/UserController  The location will be /app/controllers/UserFolder/UserController",
            "title": "Using the command line tool"
        },
        {
            "location": "/controller/#basecontroler",
            "text": "All controller should extend BaseController \n(this is already done for you if you created your controller using \nthe inbuilt command line tool) in other to have access to Request.  You can reference request like so  \n<?php\n\n$request = $this->request; // contains the entire request object",
            "title": "BaseControler"
        },
        {
            "location": "/controller/#a-more-complete-example",
            "text": "<?php\n\nnamespace App\\Controllers;\n\nclass UserController extends BaseController\n{\n    public function show()\n    {\n        /**\n         * Retrieve value from request, used for both POST and GET request\n         */\n        $username = $this->request->input('username'); \n\n        /**\n         * Set a username session \n         */\n        session()->set('username', $username);\n\n        /**\n         * Get the value of the username session\n         */\n        $sessionUsername = session()->get('username');\n\n        view('home.twig', compact($sessionUsername));\n    }\n}",
            "title": "A more complete example"
        },
        {
            "location": "/views/",
            "text": "Legato framework supports two main templating engine out of the box: \n\n\n\n\nTwig and \n\n\nBlade.\n\n\n\n\nThe default template engine is Twig, of course, you can \neasily switch to Blade or use raw PHP if you like, to \nchange your template engine update your .env file as follow:\n\n\nDefault\n\n\nTEMPLATE_ENGINE=twig\n\n\n\n\nUsing Blade\n\n\nTEMPLATE_ENGINE=blade\n\n\n\n\nCreating a View\n\n\nTypically all views should be created inside \nresources/views\n folder, depending on the templating engine you choose you will then have to create files that correspond to that template engine for example if you choose to use Blade as your template engine then your file extension should end with .blade.php so if you're creating an about us page you might do the following:\n\n\nBlade\n\n\nabout.blade.php \n\n\nthe structure will look like so\n\n\n\nresources\n|---views\n|       about.blade.php\n\n\n\n\n\nTwig\n\n\nabout.twig \n\n\nthe structure will look like so\n\n\n\nresources\n|---views\n|       about.twig\n\n\n\n\n\nLoading a view\n\n\nLoading a view is very simple using the global \nview\n helper function, which accepts two arguments:\n\n\n\n\nThe name of the view or file to load and \n\n\nOptional data array \n\n\n\n\nTo load a particular view file you will use the following method:\n\n\nview('name');\n\n\nConsider the following example showing how to load the \nabout page from within a controller:\n\n\n\n<?php\n\nnamespace App\\Controllers;\n\nclass IndexController extends BaseController\n{\n\n    public function show()\n    {\n        view('about');\n    }\n}\n\n\n\n\n\nwhen using blade or twig you don't need to specify the extension. \n\n\nPassing Dynamic Data to the View\n\n\nyou can also pass data to the view like so:\n\n\n<?php\n\nnamespace App\\Controllers;\n\nuse App\\Models\\User;\n\nclass IndexController extends BaseController\n{\n\n    public function show()\n    {\n        $users = User::all();\n\n        view('about', compact('users') );\n    }\n}\n\n\n\n\n\nDisplaying Dynamic Data in Twig View\n\n\nfollowing the example above we can now display the \ndata in the twig view as follows: \n\n\n\n<h1>Users</h1>\n<ul>\n    {% for user in users %}\n        <li>{{ user.username }}: {{ user.email }}</li>\n    {% endfor %}\n</ul>\n\n\n\n\n\nDisplaying Dynamic Data in Blade View\n\n\nfollowing the example above we can now display the data in \nthe blade view as follows: \n\n\n\n<h1>Users</h1>\n<ul>\n    @foreach($users as $user)\n        <li>{{ $user->username }}: {{ $user->email  }}</li>\n    @endforeach\n</ul>\n\n\n\n\n\nwhen using blade remember to set the correct template value in \n.env\n\n\nTwig Global Variables\n\n\nIf you wish to declare variables when using twig simply add \nit to the file \nconfig/twig.php\n for example to declare a global variable called \napp_name\n we can do the following:\n\n\n\n<?php\n\nreturn [\n    'twig_global' => [\n        'app_name' => getenv('APP_NAME'),\n    ]\n];\n\n\n\n\n\nthen inside the view, we can reference it like so: \n\n\n\n{% block title %} {{ app_name }}{% endblock %}",
            "title": "Views"
        },
        {
            "location": "/views/#default",
            "text": "TEMPLATE_ENGINE=twig",
            "title": "Default"
        },
        {
            "location": "/views/#using-blade",
            "text": "TEMPLATE_ENGINE=blade",
            "title": "Using Blade"
        },
        {
            "location": "/views/#creating-a-view",
            "text": "Typically all views should be created inside  resources/views  folder, depending on the templating engine you choose you will then have to create files that correspond to that template engine for example if you choose to use Blade as your template engine then your file extension should end with .blade.php so if you're creating an about us page you might do the following:",
            "title": "Creating a View"
        },
        {
            "location": "/views/#blade",
            "text": "about.blade.php   the structure will look like so  \nresources\n|---views\n|       about.blade.php",
            "title": "Blade"
        },
        {
            "location": "/views/#twig",
            "text": "about.twig   the structure will look like so  \nresources\n|---views\n|       about.twig",
            "title": "Twig"
        },
        {
            "location": "/views/#loading-a-view",
            "text": "Loading a view is very simple using the global  view  helper function, which accepts two arguments:   The name of the view or file to load and   Optional data array    To load a particular view file you will use the following method:  view('name');  Consider the following example showing how to load the \nabout page from within a controller:  \n<?php\n\nnamespace App\\Controllers;\n\nclass IndexController extends BaseController\n{\n\n    public function show()\n    {\n        view('about');\n    }\n}  when using blade or twig you don't need to specify the extension.",
            "title": "Loading a view"
        },
        {
            "location": "/views/#passing-dynamic-data-to-the-view",
            "text": "you can also pass data to the view like so:  <?php\n\nnamespace App\\Controllers;\n\nuse App\\Models\\User;\n\nclass IndexController extends BaseController\n{\n\n    public function show()\n    {\n        $users = User::all();\n\n        view('about', compact('users') );\n    }\n}",
            "title": "Passing Dynamic Data to the View"
        },
        {
            "location": "/views/#displaying-dynamic-data-in-twig-view",
            "text": "following the example above we can now display the \ndata in the twig view as follows:   \n<h1>Users</h1>\n<ul>\n    {% for user in users %}\n        <li>{{ user.username }}: {{ user.email }}</li>\n    {% endfor %}\n</ul>",
            "title": "Displaying Dynamic Data in Twig View"
        },
        {
            "location": "/views/#displaying-dynamic-data-in-blade-view",
            "text": "following the example above we can now display the data in \nthe blade view as follows:   \n<h1>Users</h1>\n<ul>\n    @foreach($users as $user)\n        <li>{{ $user->username }}: {{ $user->email  }}</li>\n    @endforeach\n</ul>  when using blade remember to set the correct template value in  .env",
            "title": "Displaying Dynamic Data in Blade View"
        },
        {
            "location": "/views/#twig-global-variables",
            "text": "If you wish to declare variables when using twig simply add \nit to the file  config/twig.php  for example to declare a global variable called  app_name  we can do the following:  \n<?php\n\nreturn [\n    'twig_global' => [\n        'app_name' => getenv('APP_NAME'),\n    ]\n];  then inside the view, we can reference it like so:   \n{% block title %} {{ app_name }}{% endblock %}",
            "title": "Twig Global Variables"
        },
        {
            "location": "/database/",
            "text": "The legato framework makes it easy for you to connect and manipulate database \ncontent via support for illuminate database package out of the box.\n\n\nConnecting to a Database\n\n\nTo establish a connection to the database simple update you \n.env\n file with the following:\n\n\n\nDB_DRIVER=mysql \nDB_HOST=localhost\nDB_NAME=db_name\nDB_USERNAME=db_username\nDB_PASSWORD=db_password\n\n\n\n\n\nQuerying the Database\n\n\nQuerying the database is super easy, if you already know how to use Laravel Query builder then you are good to go, let consider a basic example, retrieving all records from the users table\n\n\n\n<?php\n\nuse Legato\\Framework\\Connection as DB;\n\n$users = DB::table('users')->get();\n\n\n\n\n\nThe get method returns an \nIlluminate\\Support\\Collection\n containing the results where each result is an instance of the \nPHP StdClass object\n. You may access each column's value by accessing the column as a property of the object:\n\n\n\n<?php\n\n foreach ($users as $user)\n {\n    echo $user->username;\n }\n\n\n\n\n\nRetrieving A Single Row / Column From A Table\n\n\nIf you just need to retrieve a single row from the database table, you may use the first method. This method will return a single StdClass object:\n\n\n\n<?php\n\n$user = DB::table('users')->where('name', 'John')->first();\n\necho $user->name;\n\n\n\n\n\nIf you don't even need an entire row, you may extract a single value from a record using the value method. This method will return the value of the column directly:\n\n\n\n<?php\n\n$email = DB::table('users')->where('name', 'John')->value('email');\n\n\n\n\n\nRetrieving A List Of Column Values\n\n\nIf you would like to retrieve a Collection containing the values of a single column, you may use the pluck method. In this example, we'll retrieve a Collection of role titles:\n\n\n\n<?php\n\n$titles = DB::table('roles')->pluck('title');\n\nforeach ($titles as $title) {\n    echo $title;\n}\n\n\n\n\n\nYou may also specify a custom key column for the returned Collection:\n\n\n\n<?php\n\n$roles = DB::table('roles')->pluck('title', 'name');\n\nforeach ($roles as $name => $title) {\n    echo $title;\n}\n\n\n\n\n\nChunking Results\n\n\nIf you need to work with thousands of database records, consider using the chunk method. This method retrieves a small chunk of the results at a time and feeds each chunk into a Closure for processing. This method is very useful for writing Artisan commands that process thousands of records. For example, let's work with the entire users table in chunks of 100 records at a time:\n\n\n\n<?php\n\nDB::table('users')->orderBy('id')->chunk(100, function ($users) {\n    foreach ($users as $user) {\n        //\n    }\n});\n\n\n\n\n\nYou may stop further chunks from being processed by returning false from the Closure:\n\n\n\n<?php\n\nDB::table('users')->orderBy('id')->chunk(100, function ($users) {\n    // Process the records...\n\n    return false;\n});\n\n\n\n\n\nAggregates\n\n\nThe query builder also provides a variety of aggregate methods such as count, max, min, avg, and sum. You may call any of these methods after constructing your query:\n\n\n\n<?php\n\n$users = DB::table('users')->count();\n\n$price = DB::table('orders')->max('price');\n\nOf course, you may combine these methods with other clauses:\n\n$price = DB::table('orders')\n                ->where('finalized', 1)\n                ->avg('price');\n\n\n\n\n\nDetermining If Records Exist\n\n\nInstead of using the count method to determine if any records exist that match your query's constraints, you may use the exists and doesntExist methods:\n\n\n\n<?php\n\nreturn DB::table('orders')->where('finalized', 1)->exists();\n\nreturn DB::table('orders')->where('finalized', 1)->doesntExist();\n\n\n\n\n\nSpecifying A Select Clause\n\n\nOf course, you may not always want to select all columns from a database table. Using the select method, you can specify a custom select clause for the query:\n\n\n$users = DB::table('users')->select('name', 'email as user_email')->get();\n\n\nThe distinct method allows you to force the query to return distinct results:\n\n\n$users = DB::table('users')->distinct()->get();\n\n\nIf you already have a query builder instance and you wish to add a column to its existing select clause, you may use the addSelect method:\n\n\n$query = DB::table('users')->select('name');\n\n\n$users = $query->addSelect('age')->get();\n\n\nInserts\n\n\nThe query builder also provides an insert method for inserting records into the database table. The insert method accepts an array of column names and values:\n\n\nDB::table('users')->insert(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n\n\nYou may even insert several records into the table with a single call to insert by passing an array of arrays. Each array represents a row to be inserted into the table:\n\n\n\n<?php\n\nDB::table('users')->insert([\n    ['email' => 'taylor@example.com', 'votes' => 0],\n    ['email' => 'dayle@example.com', 'votes' => 0]\n]);\n\n\n\n\n\nAuto-Incrementing IDs\n\n\nIf the table has an auto-incrementing id, use the insertGetId method to insert a record and then retrieve the ID:\n\n\n\n<?php\n\n$id = DB::table('users')->insertGetId(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n\n\n\n\n\nWhen using PostgreSQL the insertGetId method expects the auto-incrementing column to be named id. If you would like to retrieve the ID from a different \"sequence\", you may pass the column name as the second parameter to the insertGetId method.\n\n\nUpdates\n\n\nOf course, in addition to inserting records into the database, the query builder can also update existing records using the update method. The update method, like the insert method, accepts an array of column and value pairs containing the columns to be updated. You may constrain the update query using where clauses:\n\n\n\n<?php\n\nDB::table('users')\n            ->where('id', 1)\n            ->update(['votes' => 1]);\n\n\n\n\n\nUpdating JSON Columns\n\n\nWhen updating a JSON column, you should use -> syntax to access the appropriate key in the JSON object. This operation is only supported on databases that support JSON columns:\n\n\n\n<?php\n\nDB::table('users')\n            ->where('id', 1)\n            ->update(['options->enabled' => true]);\n\n\n\n\n\nMost of the content of this page is directly copied from Laravel documentation for \nDatabase Query Builder\n, visit the link to learn more.",
            "title": "Database"
        },
        {
            "location": "/database/#connecting-to-a-database",
            "text": "To establish a connection to the database simple update you  .env  file with the following:  \nDB_DRIVER=mysql \nDB_HOST=localhost\nDB_NAME=db_name\nDB_USERNAME=db_username\nDB_PASSWORD=db_password",
            "title": "Connecting to a Database"
        },
        {
            "location": "/database/#querying-the-database",
            "text": "Querying the database is super easy, if you already know how to use Laravel Query builder then you are good to go, let consider a basic example, retrieving all records from the users table  \n<?php\n\nuse Legato\\Framework\\Connection as DB;\n\n$users = DB::table('users')->get();  The get method returns an  Illuminate\\Support\\Collection  containing the results where each result is an instance of the  PHP StdClass object . You may access each column's value by accessing the column as a property of the object:  \n<?php\n\n foreach ($users as $user)\n {\n    echo $user->username;\n }  Retrieving A Single Row / Column From A Table  If you just need to retrieve a single row from the database table, you may use the first method. This method will return a single StdClass object:  \n<?php\n\n$user = DB::table('users')->where('name', 'John')->first();\n\necho $user->name;  If you don't even need an entire row, you may extract a single value from a record using the value method. This method will return the value of the column directly:  \n<?php\n\n$email = DB::table('users')->where('name', 'John')->value('email');  Retrieving A List Of Column Values  If you would like to retrieve a Collection containing the values of a single column, you may use the pluck method. In this example, we'll retrieve a Collection of role titles:  \n<?php\n\n$titles = DB::table('roles')->pluck('title');\n\nforeach ($titles as $title) {\n    echo $title;\n}  You may also specify a custom key column for the returned Collection:  \n<?php\n\n$roles = DB::table('roles')->pluck('title', 'name');\n\nforeach ($roles as $name => $title) {\n    echo $title;\n}  Chunking Results  If you need to work with thousands of database records, consider using the chunk method. This method retrieves a small chunk of the results at a time and feeds each chunk into a Closure for processing. This method is very useful for writing Artisan commands that process thousands of records. For example, let's work with the entire users table in chunks of 100 records at a time:  \n<?php\n\nDB::table('users')->orderBy('id')->chunk(100, function ($users) {\n    foreach ($users as $user) {\n        //\n    }\n});  You may stop further chunks from being processed by returning false from the Closure:  \n<?php\n\nDB::table('users')->orderBy('id')->chunk(100, function ($users) {\n    // Process the records...\n\n    return false;\n});  Aggregates  The query builder also provides a variety of aggregate methods such as count, max, min, avg, and sum. You may call any of these methods after constructing your query:  \n<?php\n\n$users = DB::table('users')->count();\n\n$price = DB::table('orders')->max('price');\n\nOf course, you may combine these methods with other clauses:\n\n$price = DB::table('orders')\n                ->where('finalized', 1)\n                ->avg('price');  Determining If Records Exist  Instead of using the count method to determine if any records exist that match your query's constraints, you may use the exists and doesntExist methods:  \n<?php\n\nreturn DB::table('orders')->where('finalized', 1)->exists();\n\nreturn DB::table('orders')->where('finalized', 1)->doesntExist();  Specifying A Select Clause  Of course, you may not always want to select all columns from a database table. Using the select method, you can specify a custom select clause for the query:  $users = DB::table('users')->select('name', 'email as user_email')->get();  The distinct method allows you to force the query to return distinct results:  $users = DB::table('users')->distinct()->get();  If you already have a query builder instance and you wish to add a column to its existing select clause, you may use the addSelect method:  $query = DB::table('users')->select('name');  $users = $query->addSelect('age')->get();",
            "title": "Querying the Database"
        },
        {
            "location": "/database/#inserts",
            "text": "The query builder also provides an insert method for inserting records into the database table. The insert method accepts an array of column names and values:  DB::table('users')->insert(\n    ['email' => 'john@example.com', 'votes' => 0]\n);  You may even insert several records into the table with a single call to insert by passing an array of arrays. Each array represents a row to be inserted into the table:  \n<?php\n\nDB::table('users')->insert([\n    ['email' => 'taylor@example.com', 'votes' => 0],\n    ['email' => 'dayle@example.com', 'votes' => 0]\n]);  Auto-Incrementing IDs  If the table has an auto-incrementing id, use the insertGetId method to insert a record and then retrieve the ID:  \n<?php\n\n$id = DB::table('users')->insertGetId(\n    ['email' => 'john@example.com', 'votes' => 0]\n);  When using PostgreSQL the insertGetId method expects the auto-incrementing column to be named id. If you would like to retrieve the ID from a different \"sequence\", you may pass the column name as the second parameter to the insertGetId method.",
            "title": "Inserts"
        },
        {
            "location": "/database/#updates",
            "text": "Of course, in addition to inserting records into the database, the query builder can also update existing records using the update method. The update method, like the insert method, accepts an array of column and value pairs containing the columns to be updated. You may constrain the update query using where clauses:  \n<?php\n\nDB::table('users')\n            ->where('id', 1)\n            ->update(['votes' => 1]);  Updating JSON Columns  When updating a JSON column, you should use -> syntax to access the appropriate key in the JSON object. This operation is only supported on databases that support JSON columns:  \n<?php\n\nDB::table('users')\n            ->where('id', 1)\n            ->update(['options->enabled' => true]);  Most of the content of this page is directly copied from Laravel documentation for  Database Query Builder , visit the link to learn more.",
            "title": "Updates"
        },
        {
            "location": "/models/",
            "text": "Legato Model are based solely on Laravel Eloquent ORM.\n\n\nCreating a Model\n\n\nThere are two ways to create a model:\n\n\n\n\nConsole command\n\n\nManually creating the file\n\n\n\n\nConsole Command\n\n\nTo create a model using console command simple type: \n\n\n$ php Legato add:model User\n\n\nthis will create a User class inside \napp/models\n off course you can also place the class inside a subdirectory like so\n\n\n$ php Legato add:model Foldername/User\n\n\nthis will place the file inside \napp/models/Foldername\n\n\nthe generated class will look similar to the following:\n\n\n\n<?php\n\nnamespace App\\Models;\n\nuse Legato\\Framework\\Fluent;\n\nclass User extends Fluent\n{\n    /**\n     * Database fields that can be populated with mass assignment\n     *\n     * @var array\n     */\n    protected $fillable = [];\n}\n\n\n\n\n\nif you chooe to create your model manually ensure to add \n\n\nuse Legato\\Framework\\Fluent;\n and \nextend Fluent\n class\n\n\nTable Names\n\n\nNote that we did not tell Eloquent which table to use for our User model. By convention, the \"snake case\", plural name of the class will be used as the table name unless another name is explicitly specified. So, in this case, Eloquent will assume the User model stores records in the users table. You may specify a custom table by defining a table property on your model:\n\n\n\n<?php\n\nnamespace App\\Models;\n\nuse Legato\\Framework\\Fluent;\n\nclass User extends Fluent\n{\n    protected $table = 'my_users';\n}\n\n\n\n\n\nPrimary Keys\n\n\nEloquent will also assume that each table has a primary key column named id. You may define a protected $primaryKey property to override this convention.\n\n\nIn addition, Eloquent assumes that the primary key is an incrementing integer value, which means that by default the primary key will be cast to an int automatically. If you wish to use a non-incrementing or a non-numeric primary key you must set the public $incrementing property on your model to false. If your primary key is not an integer, you should set the protected $keyType property on your model to string.\n\n\nTimestamps\n\n\nBy default, Eloquent expects created_at and updated_at columns to exist on your tables. If you do not wish to have these columns automatically managed by Eloquent, set the $timestamps property on your model to false:\n\n\n\n<?php\n\nnamespace App\\Models;\n\nuse Legato\\Framework\\Fluent;\n\nclass User extends Fluent\n{\n    public $timestamps = false;\n}\n\n\n\n\n\nIf you need to customize the format of your timestamps, set the $dateFormat property on your model. This property determines how date attributes are stored in the database, as well as their format when the model is serialized to an array or JSON:\n\n\n\n<?php\n\nnamespace App\\Models;\n\nuse Legato\\Framework\\Fluent;\n\nclass User extends Fluent\n{\n    protected $dateFormat = 'U';\n}\n\n\n\n\n\nIf you need to customize the names of the columns used to store the timestamps, you may set the CREATED_AT and UPDATED_AT constants in your model:\n\n\n\n<?php\n\nclass User extends Fluent\n{\n    const CREATED_AT = 'creation_date';\n    const UPDATED_AT = 'last_update';\n}\n\n\n\n\n\nRetrieving Models\n\n\nOnce you have created a model and its associated database table, you are ready to start retrieving data from your database. Think of each Eloquent model as a powerful query builder allowing you to fluently query the database table associated with the model. For example:\n\n\n\n<?php\n\nuse App\\Models\\User;\n\n$users = User::all();\n\nforeach (users as $user) {\n    echo $user->username;\n}\n\n\n\n\n\nAdding Additional Constraints\n\n\nThe Eloquent all method will return all of the results in the model's table. Since each Eloquent model serves as a query builder, you may also add constraints to queries, and then use the get method to retrieve the results:\n\n\n\n<?php\n\n$users = User::where('activated', 1)\n               ->orderBy('created_at', 'desc')\n               ->take(5)\n               ->get();\n\n\n\n\n\nSince Eloquent models are query builders, you should review all of the methods available on the query builder. You may use any of these methods in your Eloquent queries.\n\n\nMost of the content of this page is directly copied from Laravel documentation for \nEloquent ORM\n, visit the link to learn more.",
            "title": "Model"
        },
        {
            "location": "/models/#creating-a-model",
            "text": "There are two ways to create a model:   Console command  Manually creating the file   Console Command  To create a model using console command simple type:   $ php Legato add:model User  this will create a User class inside  app/models  off course you can also place the class inside a subdirectory like so  $ php Legato add:model Foldername/User  this will place the file inside  app/models/Foldername  the generated class will look similar to the following:  \n<?php\n\nnamespace App\\Models;\n\nuse Legato\\Framework\\Fluent;\n\nclass User extends Fluent\n{\n    /**\n     * Database fields that can be populated with mass assignment\n     *\n     * @var array\n     */\n    protected $fillable = [];\n}  if you chooe to create your model manually ensure to add   use Legato\\Framework\\Fluent;  and  extend Fluent  class  Table Names  Note that we did not tell Eloquent which table to use for our User model. By convention, the \"snake case\", plural name of the class will be used as the table name unless another name is explicitly specified. So, in this case, Eloquent will assume the User model stores records in the users table. You may specify a custom table by defining a table property on your model:  \n<?php\n\nnamespace App\\Models;\n\nuse Legato\\Framework\\Fluent;\n\nclass User extends Fluent\n{\n    protected $table = 'my_users';\n}  Primary Keys  Eloquent will also assume that each table has a primary key column named id. You may define a protected $primaryKey property to override this convention.  In addition, Eloquent assumes that the primary key is an incrementing integer value, which means that by default the primary key will be cast to an int automatically. If you wish to use a non-incrementing or a non-numeric primary key you must set the public $incrementing property on your model to false. If your primary key is not an integer, you should set the protected $keyType property on your model to string.  Timestamps  By default, Eloquent expects created_at and updated_at columns to exist on your tables. If you do not wish to have these columns automatically managed by Eloquent, set the $timestamps property on your model to false:  \n<?php\n\nnamespace App\\Models;\n\nuse Legato\\Framework\\Fluent;\n\nclass User extends Fluent\n{\n    public $timestamps = false;\n}  If you need to customize the format of your timestamps, set the $dateFormat property on your model. This property determines how date attributes are stored in the database, as well as their format when the model is serialized to an array or JSON:  \n<?php\n\nnamespace App\\Models;\n\nuse Legato\\Framework\\Fluent;\n\nclass User extends Fluent\n{\n    protected $dateFormat = 'U';\n}  If you need to customize the names of the columns used to store the timestamps, you may set the CREATED_AT and UPDATED_AT constants in your model:  \n<?php\n\nclass User extends Fluent\n{\n    const CREATED_AT = 'creation_date';\n    const UPDATED_AT = 'last_update';\n}",
            "title": "Creating a Model"
        },
        {
            "location": "/models/#retrieving-models",
            "text": "Once you have created a model and its associated database table, you are ready to start retrieving data from your database. Think of each Eloquent model as a powerful query builder allowing you to fluently query the database table associated with the model. For example:  \n<?php\n\nuse App\\Models\\User;\n\n$users = User::all();\n\nforeach (users as $user) {\n    echo $user->username;\n}  Adding Additional Constraints  The Eloquent all method will return all of the results in the model's table. Since each Eloquent model serves as a query builder, you may also add constraints to queries, and then use the get method to retrieve the results:  \n<?php\n\n$users = User::where('activated', 1)\n               ->orderBy('created_at', 'desc')\n               ->take(5)\n               ->get();  Since Eloquent models are query builders, you should review all of the methods available on the query builder. You may use any of these methods in your Eloquent queries.  Most of the content of this page is directly copied from Laravel documentation for  Eloquent ORM , visit the link to learn more.",
            "title": "Retrieving Models"
        },
        {
            "location": "/validation/",
            "text": "Legato provides different methods to easily validate data coming into your application.\n\n\nUse case (Create User)\n\n\nLets consider a simple example, we shall attempt to create a new User, the first \nthing we need to do define the necessary routes\n\n\nDefine Routes\n\n\n<?php\n\nuse Legato\\Framework\\Routing\\Route;\n\n/**\n * show the form to create a user\n */\n\nRoute::get('/user/create', 'App\\Controllers\\UserController@showForm', 'create_user_form');\n\n/**\n * handle the create user request, this is where we do validation\n */\n\nRoute::post('/user/create', 'App\\Controllers\\UserController@create', 'create_user');\n\n\n\n\n\nCreate a Controller with Validation Logic\n\n\nnext we add the UserController class and the create method\n\n\n<?php\nnamespace App\\Controllers;\n\nuse App\\Models\\User;\nuse Legato\\Framework\\Validator\\Validator;\n\nclass UserController extends BaseController\n{\n\n    public function create()\n    {\n        $rules = [\n            'username' => ['required' => true, 'min' => 6, 'max' => 20, 'alphaNum' => true, 'unique' => 'users'],\n            'email' => ['required' => true, 'email' => true],\n            'password' => ['required' => true, 'min' => 6],\n        ];\n\n        /**\n             * @param, postData, the data that is under validation\n             * @param, rules, set of rules that must be satisfied\n             * @param, custom error messages (optional)\n         */\n\n        $validator = new Validator($this->request->all(), $rules);\n\n        if($validator->fail()){\n            //handle validation error\n            $errorBag = $validator->error()->get(); //mu\n        }\n\n        //create user \n        User::create($this->request->all());\n    }\n}\n\n\n\n\nYou can see that we only had to create a new instance of\n\nLegato\\Framework\\Validator\\Validator::class\n and pass it the requires parameters, which are\n \npostData\n, \nrules\n, and optionally a \ncustom\n error message to replace the default.\n\n\nDisplaying Validation Errors\n\n\nIf the request data does not pass validation, you can easily get all the \nvalidation errors from the validator instance \n\n\n<?php\n\n     if($validator->fail()){\n         //handle validation error\n         $errorBag = $validator->error()->get();\n\n         foreach ($errorBag as $errors) {\n             foreach ($errors as $error){\n                 echo $error . '<br />';\n             }\n         }\n     }\n\n\n\n\n\nGetting Validation errors for specific fields\n\n\nIf you will wish to get validation errors for each field separately then you can do the following:\n\n\n<?php\n\n /**\n     * Check if a given key exists in error message\n     *\n     * @param $key\n     * @return bool\n */\n\n $exists = $validator->error()->has('username');\n\n\n /**\n    *  Get all the validation errors for a specific fields\n * \n    *  @param $key   \n    *  @return array\n */\n\n$usernameErrors = $validator->error()->get('username');\n\n/**\n    * Get the first validation error for a specific fields\n * \n    * @param $key\n    * @return mixed   \n */\n\n$firstErrors = $validator->error()->first('username');\n\n\n\n\n\nAvailable Validation Rules\n\n\nThe following validation rule are available starting from \nLegato v1.0.9, there is no validation feature for older versions:\n\n\n#Unique rule\n\n\nThe \nunique\n rule allows you to check if a given value exists in a specific database\ntable, specific the unique rule like so: \n\n\n<?php\n\n    $rules = [\n        'username' => ['unique' => 'users',],\n    ];\n\n\n\n\n\nwhere username is a valid column in the users table.\n\n\n#Required rule\n\n\nThe \nrequired\n rule is use to specific that a specific field cannot be empty, the example \nbelow ensure that the user cannot signup unless they provide a username: \n\n\n<?php\n\n    $rules = [\n        'username' => ['required' => true,],\n    ];\n\n\n\n\n\n#AlphaNum rule\n\n\nThe \nalphaNum\n rule is use to validate alphanumeric, returns \ntrue if every character in text under validation is either\na letter or a digit: e.g. Terdia07\n\n\n<?php\n\n    $rules = [\n        'username' => ['alphaNum' => true,],\n    ];\n\n\n\n\n\n#Alpha rule\n\n\nThe \nalpha\n rule is use to validate alphabetic, returns \ntrue if every character in text under validation is a \nletter from the current locale: e.g. Terdia\n\n\n<?php\n\n    $rules = [\n        'username' => ['alpha' => true,],\n    ];\n\n\n\n\n\n#Email rule\n\n\nThe \nemail\n rule is use to validate email address:\n\n\n<?php\n\n    $rules = [\n        'username' => ['email' => true,],\n    ];\n\n\n\n\n\n#Numeric rule\n\n\nThe \nnumeric\n rule is use to Check for numeric character, returns true \nif every character in the string is a decimal digit:\n\n\n<?php\n\n    $rules = [\n        'username' => ['numeric' => true,],\n    ];\n\n\n\n\n\n#Min rule\n\n\nThe \nmin\n rule is validate the minimum length for the given value, \nreturns false if length of the value is less than rule:\n\n\n<?php\n\n    $rules = [\n        'username' => ['min' => 6,],\n    ];\n\n\n\n\n\n#Max rule\n\n\nThe \nmax\n rule is validate the maximum length for the given value, \nreturns false if length of value is greater than rule:\n\n\n<?php\n\n    $rules = [\n        'username' => ['max' => 6,],\n    ];\n\n\n\n\n\n#String rule\n\n\nThe \nstring\n rule will allow you validate fields such as fullname that can have multiple words\n e.g. Osayawe Terry, returns false if the value under validation contains number:\n\n\n<?php\n\n    $rules = [\n        'fullname' => ['max' => 6, 'string' => true],\n    ];\n\n\n\n\n\n#Float rule\n\n\nThe \nfloat\n rule is use to check if the value under validation \nis a float e.g. 67.0, 89 is also valid:\n\n\n<?php\n\n    $rules = [\n        'price' => ['float' => true],\n    ];\n\n\n\n\n\n#Mixed rule\n\n\nThe \nmixed\n rule will allow you valid a sentence, this is suitable for validating\n data that might contain some special character \n e.g. That's the car, parked over there, it can contain letters, numbers and\n any of the following A-Za-z0-9 .,_~-!@#\\&%'* special characters:\n\n\n<?php\n\n    $rules = [\n        'post_body' => ['mixed' => true,],\n    ];\n\n\n\n\n\n#IP rule\n\n\nThe \nip\n rule is use to check if the value under validation \nis a valid IP address e.g. 127.0.0.1:\n\n\n<?php\n\n    $rules = [\n        'IP Address' => ['ip' => true],\n    ];\n\n\n\n\n\n#Url rule\n\n\nThe \nurl\n rule is use to check if the value under validation \nis a valid URL e.g. http://docs.legatoframework.com:\n\n\n<?php\n\n    $rules = [\n        'Website' => ['url' => true],\n    ];\n\n\n\n\n\nMore Validation rules will be added from time to time",
            "title": "Validation"
        },
        {
            "location": "/validation/#use-case-create-user",
            "text": "Lets consider a simple example, we shall attempt to create a new User, the first \nthing we need to do define the necessary routes",
            "title": "Use case (Create User)"
        },
        {
            "location": "/validation/#define-routes",
            "text": "<?php\n\nuse Legato\\Framework\\Routing\\Route;\n\n/**\n * show the form to create a user\n */\n\nRoute::get('/user/create', 'App\\Controllers\\UserController@showForm', 'create_user_form');\n\n/**\n * handle the create user request, this is where we do validation\n */\n\nRoute::post('/user/create', 'App\\Controllers\\UserController@create', 'create_user');",
            "title": "Define Routes"
        },
        {
            "location": "/validation/#create-a-controller-with-validation-logic",
            "text": "next we add the UserController class and the create method  <?php\nnamespace App\\Controllers;\n\nuse App\\Models\\User;\nuse Legato\\Framework\\Validator\\Validator;\n\nclass UserController extends BaseController\n{\n\n    public function create()\n    {\n        $rules = [\n            'username' => ['required' => true, 'min' => 6, 'max' => 20, 'alphaNum' => true, 'unique' => 'users'],\n            'email' => ['required' => true, 'email' => true],\n            'password' => ['required' => true, 'min' => 6],\n        ];\n\n        /**\n             * @param, postData, the data that is under validation\n             * @param, rules, set of rules that must be satisfied\n             * @param, custom error messages (optional)\n         */\n\n        $validator = new Validator($this->request->all(), $rules);\n\n        if($validator->fail()){\n            //handle validation error\n            $errorBag = $validator->error()->get(); //mu\n        }\n\n        //create user \n        User::create($this->request->all());\n    }\n}  You can see that we only had to create a new instance of Legato\\Framework\\Validator\\Validator::class  and pass it the requires parameters, which are\n  postData ,  rules , and optionally a  custom  error message to replace the default.",
            "title": "Create a Controller with Validation Logic"
        },
        {
            "location": "/validation/#displaying-validation-errors",
            "text": "If the request data does not pass validation, you can easily get all the \nvalidation errors from the validator instance   <?php\n\n     if($validator->fail()){\n         //handle validation error\n         $errorBag = $validator->error()->get();\n\n         foreach ($errorBag as $errors) {\n             foreach ($errors as $error){\n                 echo $error . '<br />';\n             }\n         }\n     }",
            "title": "Displaying Validation Errors"
        },
        {
            "location": "/validation/#getting-validation-errors-for-specific-fields",
            "text": "If you will wish to get validation errors for each field separately then you can do the following:  <?php\n\n /**\n     * Check if a given key exists in error message\n     *\n     * @param $key\n     * @return bool\n */\n\n $exists = $validator->error()->has('username');\n\n\n /**\n    *  Get all the validation errors for a specific fields\n * \n    *  @param $key   \n    *  @return array\n */\n\n$usernameErrors = $validator->error()->get('username');\n\n/**\n    * Get the first validation error for a specific fields\n * \n    * @param $key\n    * @return mixed   \n */\n\n$firstErrors = $validator->error()->first('username');",
            "title": "Getting Validation errors for specific fields"
        },
        {
            "location": "/validation/#available-validation-rules",
            "text": "The following validation rule are available starting from \nLegato v1.0.9, there is no validation feature for older versions:",
            "title": "Available Validation Rules"
        },
        {
            "location": "/validation/#unique-rule",
            "text": "The  unique  rule allows you to check if a given value exists in a specific database\ntable, specific the unique rule like so:   <?php\n\n    $rules = [\n        'username' => ['unique' => 'users',],\n    ];  where username is a valid column in the users table.",
            "title": "#Unique rule"
        },
        {
            "location": "/validation/#required-rule",
            "text": "The  required  rule is use to specific that a specific field cannot be empty, the example \nbelow ensure that the user cannot signup unless they provide a username:   <?php\n\n    $rules = [\n        'username' => ['required' => true,],\n    ];",
            "title": "#Required rule"
        },
        {
            "location": "/validation/#alphanum-rule",
            "text": "The  alphaNum  rule is use to validate alphanumeric, returns \ntrue if every character in text under validation is either\na letter or a digit: e.g. Terdia07  <?php\n\n    $rules = [\n        'username' => ['alphaNum' => true,],\n    ];",
            "title": "#AlphaNum rule"
        },
        {
            "location": "/validation/#alpha-rule",
            "text": "The  alpha  rule is use to validate alphabetic, returns \ntrue if every character in text under validation is a \nletter from the current locale: e.g. Terdia  <?php\n\n    $rules = [\n        'username' => ['alpha' => true,],\n    ];",
            "title": "#Alpha rule"
        },
        {
            "location": "/validation/#email-rule",
            "text": "The  email  rule is use to validate email address:  <?php\n\n    $rules = [\n        'username' => ['email' => true,],\n    ];",
            "title": "#Email rule"
        },
        {
            "location": "/validation/#numeric-rule",
            "text": "The  numeric  rule is use to Check for numeric character, returns true \nif every character in the string is a decimal digit:  <?php\n\n    $rules = [\n        'username' => ['numeric' => true,],\n    ];",
            "title": "#Numeric rule"
        },
        {
            "location": "/validation/#min-rule",
            "text": "The  min  rule is validate the minimum length for the given value, \nreturns false if length of the value is less than rule:  <?php\n\n    $rules = [\n        'username' => ['min' => 6,],\n    ];",
            "title": "#Min rule"
        },
        {
            "location": "/validation/#max-rule",
            "text": "The  max  rule is validate the maximum length for the given value, \nreturns false if length of value is greater than rule:  <?php\n\n    $rules = [\n        'username' => ['max' => 6,],\n    ];",
            "title": "#Max rule"
        },
        {
            "location": "/validation/#string-rule",
            "text": "The  string  rule will allow you validate fields such as fullname that can have multiple words\n e.g. Osayawe Terry, returns false if the value under validation contains number:  <?php\n\n    $rules = [\n        'fullname' => ['max' => 6, 'string' => true],\n    ];",
            "title": "#String rule"
        },
        {
            "location": "/validation/#float-rule",
            "text": "The  float  rule is use to check if the value under validation \nis a float e.g. 67.0, 89 is also valid:  <?php\n\n    $rules = [\n        'price' => ['float' => true],\n    ];",
            "title": "#Float rule"
        },
        {
            "location": "/validation/#mixed-rule",
            "text": "The  mixed  rule will allow you valid a sentence, this is suitable for validating\n data that might contain some special character \n e.g. That's the car, parked over there, it can contain letters, numbers and\n any of the following A-Za-z0-9 .,_~-!@#\\&%'* special characters:  <?php\n\n    $rules = [\n        'post_body' => ['mixed' => true,],\n    ];",
            "title": "#Mixed rule"
        },
        {
            "location": "/validation/#ip-rule",
            "text": "The  ip  rule is use to check if the value under validation \nis a valid IP address e.g. 127.0.0.1:  <?php\n\n    $rules = [\n        'IP Address' => ['ip' => true],\n    ];",
            "title": "#IP rule"
        },
        {
            "location": "/validation/#url-rule",
            "text": "The  url  rule is use to check if the value under validation \nis a valid URL e.g. http://docs.legatoframework.com:  <?php\n\n    $rules = [\n        'Website' => ['url' => true],\n    ];  More Validation rules will be added from time to time",
            "title": "#Url rule"
        },
        {
            "location": "/mail/",
            "text": "The Legato framework provides support for email sending using SMTP (Gmail, Mailgun, etc,) and Mailgun API. The Legato Mail class is built on top of Swiftmailer library.\n\n\nSMTP Setup\n\n\nTo send mail using SMTP first update your \n.env\n file as follows: \n\n\nDriver\n\n\nset \nMAIL_DRIVER=smtp\n\n\nCredentials\n\n\n\nSMTP_HOST=smtp.gmail.com\nSMTP_PORT=587\nSMTP_USERNAME=your_smtp_username\nSMTP_PASSWORD=your_smtp_password\n\n\n\n\n\nMailgun Setup\n\n\nTo send mail using Mailgun API first update your \n.env\n file as follows: \n\n\nDriver\n\n\nset \nMAIL_DRIVER=mailgun\n\n\nCredentials\n\n\n\nMAILGUN_DOMAIN=your_mailgun_domain\nMAILGUN_SECRET=your_mailgun_api_key\n\n\n\n\n\nSending Mail\n\n\nTo send an email simply do the following:\n\n\n\n<?php\n\nuse Legato\\Framework\\Mail\\Mail;\n\n $params = [\n            'to' => ['example@test.com' => 'name'], //recipient name is optional\n            'from' => ['no-reply@legato.com' => 'name'], //sender name is optional\n            'subject' => 'Sending mail from Legato Framework',\n            'body' => 'This is the content'\n        ];\n\n $result = Mail::send($params);      \n\n\n\n\n\nif your mail driver is set to SMTP \n$result\n variable will contain an integer which is the number of recipients that successfully sent to. if you're using mailgun as your driver you should access the message property of the \n$result\n variable to see the response.\n\n\nSending Mail with Template\n\n\nYou can also specify a file that contains the body of the mail, to so that you first have create the file inside \nresources/views\n folder, for example lets say you want to all your email templates in a folder name emails you can do the following \n\n\ncreate the folder in the right location \nresources/views/emails\n then create the actual file lets say welcome.php\n\n\nto send the mail using the file do the following\n\n\n\n<?php  \n\n$params = [\n     'to' => ['example@test.com' => 'name'],\n     'from' => ['no-reply@legato.com' => 'name'],\n     'subject' => 'Sending mail from Legato Framework',\n     'body' => ['text' => 'This is the test that will be inserted into the view', 'name' => 'Jake Pattern'],\n     'view' => 'emails/welcome.php',\n ];\n\n$result = Mail::send($params);\n\n\n\n\n\n$param['body'] should be an array of key/value pairs the key can be accessed inside the view like so: \n\n\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n</head>\n<body>\n    Dear <?php echo $data['name']?>,\n\n    <p>\n        <?php echo $data['text'] ?>\n    </p>\n</body>\n</html>\n\n\n\n\n\n$data['text']\n will be 'This is the test that will be inserted into the view' while \n$data['name']\n will be 'Jake Pattern'\n\n\nSending Mail with Attachment\n\n\nTo add an attachment to your mail simple add a \nfile\n key to the \n$params\n array like so\n\n\n\n<?php\n\n$params = [\n     ...,\n     'file' => 'path_to_file',\n ];\n\n$result = Mail::send($params);\n\n\n\n\n\nLegato current supports single file attachment. \n\n\nSetting replyTo Address\n\n\nTo set a reply to address simple add \nreplyTo\n key to your \n$params\n array like so\n\n\n\n<?php\n\n$params = [\n     ...,\n     'replyTo' => 'reply@legato.com',\n ];\n\n\n\n\n\nAdding Carbon Copy (cc) Addresses\n\n\nTo add cc addresses simple add \ncc\n key to your \n$params\n array like so\n\n\n\n<?php\n\n$params = [\n     ...,\n     'cc' => ['cc_1@legato.com' => 'John Doe', 'cc_1@legato.com'], \n ];\n\n\n\n\n\nAdding Blind Carbon Copy (bcc) Addresses\n\n\nTo add bcc addresses simple add \nbcc\n key to your \n$params\n array like so\n\n\n\n<?php\n\n$params = [\n     ...,\n     'bcc' => ['bcc_1@legato.com' => 'John Doe', 'bcc_1@legato.com'], \n ];\n\n\n\n\n\nNote that when using Mailgun API bcc and cc addresses will be combined with to address and all recipients can see who each others email address",
            "title": "Sending Mail"
        },
        {
            "location": "/mail/#smtp-setup",
            "text": "To send mail using SMTP first update your  .env  file as follows:   Driver  set  MAIL_DRIVER=smtp  Credentials  \nSMTP_HOST=smtp.gmail.com\nSMTP_PORT=587\nSMTP_USERNAME=your_smtp_username\nSMTP_PASSWORD=your_smtp_password",
            "title": "SMTP Setup"
        },
        {
            "location": "/mail/#mailgun-setup",
            "text": "To send mail using Mailgun API first update your  .env  file as follows:   Driver  set  MAIL_DRIVER=mailgun  Credentials  \nMAILGUN_DOMAIN=your_mailgun_domain\nMAILGUN_SECRET=your_mailgun_api_key",
            "title": "Mailgun Setup"
        },
        {
            "location": "/mail/#sending-mail",
            "text": "To send an email simply do the following:  \n<?php\n\nuse Legato\\Framework\\Mail\\Mail;\n\n $params = [\n            'to' => ['example@test.com' => 'name'], //recipient name is optional\n            'from' => ['no-reply@legato.com' => 'name'], //sender name is optional\n            'subject' => 'Sending mail from Legato Framework',\n            'body' => 'This is the content'\n        ];\n\n $result = Mail::send($params);        if your mail driver is set to SMTP  $result  variable will contain an integer which is the number of recipients that successfully sent to. if you're using mailgun as your driver you should access the message property of the  $result  variable to see the response.",
            "title": "Sending Mail"
        },
        {
            "location": "/mail/#sending-mail-with-template",
            "text": "You can also specify a file that contains the body of the mail, to so that you first have create the file inside  resources/views  folder, for example lets say you want to all your email templates in a folder name emails you can do the following   create the folder in the right location  resources/views/emails  then create the actual file lets say welcome.php  to send the mail using the file do the following  \n<?php  \n\n$params = [\n     'to' => ['example@test.com' => 'name'],\n     'from' => ['no-reply@legato.com' => 'name'],\n     'subject' => 'Sending mail from Legato Framework',\n     'body' => ['text' => 'This is the test that will be inserted into the view', 'name' => 'Jake Pattern'],\n     'view' => 'emails/welcome.php',\n ];\n\n$result = Mail::send($params);  $param['body'] should be an array of key/value pairs the key can be accessed inside the view like so:   \n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n</head>\n<body>\n    Dear <?php echo $data['name']?>,\n\n    <p>\n        <?php echo $data['text'] ?>\n    </p>\n</body>\n</html>  $data['text']  will be 'This is the test that will be inserted into the view' while  $data['name']  will be 'Jake Pattern'",
            "title": "Sending Mail with Template"
        },
        {
            "location": "/mail/#sending-mail-with-attachment",
            "text": "To add an attachment to your mail simple add a  file  key to the  $params  array like so  \n<?php\n\n$params = [\n     ...,\n     'file' => 'path_to_file',\n ];\n\n$result = Mail::send($params);  Legato current supports single file attachment.   Setting replyTo Address  To set a reply to address simple add  replyTo  key to your  $params  array like so  \n<?php\n\n$params = [\n     ...,\n     'replyTo' => 'reply@legato.com',\n ];  Adding Carbon Copy (cc) Addresses  To add cc addresses simple add  cc  key to your  $params  array like so  \n<?php\n\n$params = [\n     ...,\n     'cc' => ['cc_1@legato.com' => 'John Doe', 'cc_1@legato.com'], \n ];  Adding Blind Carbon Copy (bcc) Addresses  To add bcc addresses simple add  bcc  key to your  $params  array like so  \n<?php\n\n$params = [\n     ...,\n     'bcc' => ['bcc_1@legato.com' => 'John Doe', 'bcc_1@legato.com'], \n ];  Note that when using Mailgun API bcc and cc addresses will be combined with to address and all recipients can see who each others email address",
            "title": "Sending Mail with Attachment"
        },
        {
            "location": "/console/",
            "text": "Legato console is built on to of Symfony console, providing some useful commands out of the box, see all available commands simply type: \n\n\nphp Legato list\n\n\nGenerating Commands\n\n\nTo create a new command, use the add:command Legato command. This command will create a new command class in the app/commands directory. \n\n\nphp legato add:command MyCommand\n\n\nout file: app/commands/MyCommand.php with the following contents\n\n\n\n<?php\nnamespace App\\Command;\n\nuse Legato\\Framework\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass MyCommand extends Command\n{\n    /**\n     * Identifier for the console command\n     *\n     * @var string\n     */\n    protected $commandName = 'example:command';\n\n    /**\n     * Command description\n     *\n     * @var string\n     */\n    protected $description = 'Sample command without argument';\n\n    public function __construct($name = null)\n    {\n        parent::__construct($name);\n    }\n\n    /**\n     * You command logic\n     *\n     * @param InputInterface $input\n     * @param OutputInterface $output\n     * @return void\n     */\n    public function execute(InputInterface $input, OutputInterface $output)\n    {\n        $output->write('This is a sample command.');\n    }\n}\n\n\n\n\n\nRegistering Your Commands\n\n\nTo register your commands, simple add then to the \napp/commands/register.php\n like so \n\n\n\n<?php\n\nreturn [\n    \\App\\Command\\Example::class,\n    \\App\\Command\\MyCommand::class,\n];\n\n\n\n\n\nmake sure to use the fully qualified class name as shown in the code snippet above i.e. include namespace if any\n\n\nRunning You Command\n\n\nTo run you command type:\n\n\nphp legato example:command\n \n\n\nand the output based on the example here will be \"This is a sample command.\"",
            "title": "Legato Console"
        },
        {
            "location": "/console/#generating-commands",
            "text": "To create a new command, use the add:command Legato command. This command will create a new command class in the app/commands directory.   php legato add:command MyCommand  out file: app/commands/MyCommand.php with the following contents  \n<?php\nnamespace App\\Command;\n\nuse Legato\\Framework\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass MyCommand extends Command\n{\n    /**\n     * Identifier for the console command\n     *\n     * @var string\n     */\n    protected $commandName = 'example:command';\n\n    /**\n     * Command description\n     *\n     * @var string\n     */\n    protected $description = 'Sample command without argument';\n\n    public function __construct($name = null)\n    {\n        parent::__construct($name);\n    }\n\n    /**\n     * You command logic\n     *\n     * @param InputInterface $input\n     * @param OutputInterface $output\n     * @return void\n     */\n    public function execute(InputInterface $input, OutputInterface $output)\n    {\n        $output->write('This is a sample command.');\n    }\n}",
            "title": "Generating Commands"
        },
        {
            "location": "/console/#registering-your-commands",
            "text": "To register your commands, simple add then to the  app/commands/register.php  like so   \n<?php\n\nreturn [\n    \\App\\Command\\Example::class,\n    \\App\\Command\\MyCommand::class,\n];  make sure to use the fully qualified class name as shown in the code snippet above i.e. include namespace if any",
            "title": "Registering Your Commands"
        },
        {
            "location": "/console/#running-you-command",
            "text": "To run you command type:  php legato example:command    and the output based on the example here will be \"This is a sample command.\"",
            "title": "Running You Command"
        }
    ]
}