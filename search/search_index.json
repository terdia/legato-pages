{
    "docs": [
        {
            "location": "/installation/",
            "text": "Installation Requirements:\n\n\n\n\nPHP 7.1\n\n\nComposer\n\n\n\n\nInstalling Legato is very simple, first ensure you have the right PHP version and composer installed then in your command prompt run:\n\n\n$ composer create-project legato/legato blog\n\n\nThe above command will create a new Legato project inside a new folder name blog, then: \n\n\n$ cd blog\n\n\nand then run \n\n\n$ composer dump-autoload\n\n\nLocal Development With VirtualHost\n\n\nThe entry point for your Legato framework project is the index.php file \nwhich located inside the public directory, of course, you're free to \nchange this according to your need. \n\n\nIf you choose to follow the \ndefault setup, then you may need to create an entry in /etc/httpd/vhosts (for apache users on Linux) similar to the following:\n\n\n<VirtualHost *:80>\n\n    DocumentRoot /var/www/html/blog/public\n\n    ServerName example.com\n\n</VirtualHost>\n\n\n\n\nRestart Apache\n \n$ service httpd restsart\n\n\nAnd for Nginx\n add the following directive to your conf file\n\n\nlocation / {\n    try_files $uri $uri/ /index.php$is_args$args;\n}\n\n\n\n\nRestart Nginx\n \n$ service nginx restart\n\n\nNavigate to http://example.com, you should be able to view the app.\n\n\nLocal Development With PHP inbuilt server\n\n\nThis is the faster and easier way to start using Legato framework, to run Legato using the inbuilt php server do one of the following: \n\n\nDefault\n\n\nOpen the terminal and switch to your project root directory and then type the command below\n\n\nphp legato start\n \n\n\nThis will start a server which you can access at: \nhttp://localhost:8000\n\n\nif the server fails to start because it could not find the PHP executable, \nthen you may pass in the \n--path\n option to specify the path for your PHP executable \nfor example on a linux OS you may type \nwhich php\n to determine the path of your php \nexecutable in most cases it will be \n/usr/bin/php\n or simply \nphp\n. \n\n\nTo specify the path to your PHP executable type:\n\n\nphp legato start --path=/usr/bin/php\n\n\nSpecifying a Different Hostname\n\n\nif you wish to specify a different hostname you can pass in an \noptional hostname option to the start command like so:\n\n\nphp legato start --hostname=example.com\n\n\nmake sure to create the domain entry inside your hosts file like so:\n\n\n#hosts file\n127.0.0.1 example.com\n\n\n\n\nThis will start a php server which you can access at: \nhttp://example.com:8000\n\n\nSpecifying a Different Port number\n\n\nif you wish to specify a different port you can pass in an \noptional port option to the start command like so:\n\n\nphp Legato start --port=8009\n\n\nthis will start a php server which you can access at: \nhttp://localhost:8009\n\n\nSpecifying a Different Hostname and Port number\n\n\nif you wish to use a different hostname and port altogether then make sure to create the hostname entry inside your hosts file:\n\n\n#hosts file\n127.0.0.1 example.com\n\n\n\n\nthen issue the start command with both options, the order does not matter\n\n\nphp Legato start --hostname=example.com --port=8009\n\n\nWith all options\n\n\nphp Legato start --hostname=example.com --port=8009 --path=/usr/bin/php\n\n\nthis will start a php server which you can access at: \nhttp://example.com:8009\n\n\nLocal Development Without VirtualHost\n\n\nif you choose to run your project without VirtualHost, \nfor example, accessing it with \nhttp://localhost/blog/public\n \nthen ensure to update application css and javascript path from \n/css/all.css\n absolute to \ncss.all.css\n relative.\n\n\nProduction Environment\n\n\nThis guide will help you install Legato anywhere on your filesystem and \nmake it available at \nhttp://www.domain.com\n. \n\n\nNote:\n The installation may require the right permissions\n to change the DocumentRoot on Apache web servers.\n\n\nAfter installing your application using one of the methods \nabove into the directory of your choosing, you can simply set your document root\nto the public directory in the folder you installed Legato and if everything is\nsetup properly you should be able to view you app at \nhttp://www.domain.com\n.\n\n\nURL Rewriting\n\n\nApache\n\n\nLegato includes a \n.htaccess\n file in the public folder which is used \nto provide URLs without index.php in the path.\n\n\nBefore serving Legato with Apache, be sure to enable the mod_rewrite \nmodule so the .htaccess file will be honored by the server.\n\n\nIt should look something like:\n\n\nLoadModule rewrite_module libexec/apache2/mod_rewrite.so\n\n\n\n\nIn most OS the line above will be commented out by default, \nso you may just need to remove the leading # symbols.\n\n\nAfter you make changes, restart Apache to make sure the settings are active.\n\n\nIf the .htaccess file that ships with Legato does not work with your \nApache installation, try adding:\n\n\nOptions +FollowSymLinks\n at the very top\n\n\nNginx\n\n\nIf you are running Nginx server, the following directive in your \nsite configuration will direct all requests to the \nindex.php front controller:\n\n\nlocation / {\n    try_files $uri $uri/ /index.php$is_args$args;\n}\n\n\n\n\nNote:\n Make sure your root is pointing to the public directory\n\n\nSomething like this: \n\n\n\nserver {\n    listen 80;\n    server_name www.domain.com;\n    root /var/www/project/public;\n\n    index index.php;\n\n    location / {\n        try_files $uri $uri/ /index.php$is_args$args;\n    }\n}",
            "title": "Installation"
        },
        {
            "location": "/installation/#installation-requirements",
            "text": "PHP 7.1  Composer   Installing Legato is very simple, first ensure you have the right PHP version and composer installed then in your command prompt run:  $ composer create-project legato/legato blog  The above command will create a new Legato project inside a new folder name blog, then:   $ cd blog  and then run   $ composer dump-autoload",
            "title": "Installation Requirements:"
        },
        {
            "location": "/installation/#local-development-with-virtualhost",
            "text": "The entry point for your Legato framework project is the index.php file \nwhich located inside the public directory, of course, you're free to \nchange this according to your need.   If you choose to follow the \ndefault setup, then you may need to create an entry in /etc/httpd/vhosts (for apache users on Linux) similar to the following:  <VirtualHost *:80>\n\n    DocumentRoot /var/www/html/blog/public\n\n    ServerName example.com\n\n</VirtualHost>  Restart Apache   $ service httpd restsart  And for Nginx  add the following directive to your conf file  location / {\n    try_files $uri $uri/ /index.php$is_args$args;\n}  Restart Nginx   $ service nginx restart  Navigate to http://example.com, you should be able to view the app.",
            "title": "Local Development With VirtualHost"
        },
        {
            "location": "/installation/#local-development-with-php-inbuilt-server",
            "text": "This is the faster and easier way to start using Legato framework, to run Legato using the inbuilt php server do one of the following:   Default  Open the terminal and switch to your project root directory and then type the command below  php legato start    This will start a server which you can access at:  http://localhost:8000  if the server fails to start because it could not find the PHP executable, \nthen you may pass in the  --path  option to specify the path for your PHP executable \nfor example on a linux OS you may type  which php  to determine the path of your php \nexecutable in most cases it will be  /usr/bin/php  or simply  php .   To specify the path to your PHP executable type:  php legato start --path=/usr/bin/php  Specifying a Different Hostname  if you wish to specify a different hostname you can pass in an \noptional hostname option to the start command like so:  php legato start --hostname=example.com  make sure to create the domain entry inside your hosts file like so:  #hosts file\n127.0.0.1 example.com  This will start a php server which you can access at:  http://example.com:8000  Specifying a Different Port number  if you wish to specify a different port you can pass in an \noptional port option to the start command like so:  php Legato start --port=8009  this will start a php server which you can access at:  http://localhost:8009  Specifying a Different Hostname and Port number  if you wish to use a different hostname and port altogether then make sure to create the hostname entry inside your hosts file:  #hosts file\n127.0.0.1 example.com  then issue the start command with both options, the order does not matter  php Legato start --hostname=example.com --port=8009  With all options  php Legato start --hostname=example.com --port=8009 --path=/usr/bin/php  this will start a php server which you can access at:  http://example.com:8009",
            "title": "Local Development With PHP inbuilt server"
        },
        {
            "location": "/installation/#local-development-without-virtualhost",
            "text": "if you choose to run your project without VirtualHost, \nfor example, accessing it with  http://localhost/blog/public  \nthen ensure to update application css and javascript path from  /css/all.css  absolute to  css.all.css  relative.",
            "title": "Local Development Without VirtualHost"
        },
        {
            "location": "/installation/#production-environment",
            "text": "This guide will help you install Legato anywhere on your filesystem and \nmake it available at  http://www.domain.com .   Note:  The installation may require the right permissions\n to change the DocumentRoot on Apache web servers.  After installing your application using one of the methods \nabove into the directory of your choosing, you can simply set your document root\nto the public directory in the folder you installed Legato and if everything is\nsetup properly you should be able to view you app at  http://www.domain.com .",
            "title": "Production Environment"
        },
        {
            "location": "/installation/#url-rewriting",
            "text": "",
            "title": "URL Rewriting"
        },
        {
            "location": "/installation/#apache",
            "text": "Legato includes a  .htaccess  file in the public folder which is used \nto provide URLs without index.php in the path.  Before serving Legato with Apache, be sure to enable the mod_rewrite \nmodule so the .htaccess file will be honored by the server.  It should look something like:  LoadModule rewrite_module libexec/apache2/mod_rewrite.so  In most OS the line above will be commented out by default, \nso you may just need to remove the leading # symbols.  After you make changes, restart Apache to make sure the settings are active.  If the .htaccess file that ships with Legato does not work with your \nApache installation, try adding:  Options +FollowSymLinks  at the very top",
            "title": "Apache"
        },
        {
            "location": "/installation/#nginx",
            "text": "If you are running Nginx server, the following directive in your \nsite configuration will direct all requests to the \nindex.php front controller:  location / {\n    try_files $uri $uri/ /index.php$is_args$args;\n}  Note:  Make sure your root is pointing to the public directory  Something like this:   \nserver {\n    listen 80;\n    server_name www.domain.com;\n    root /var/www/project/public;\n\n    index index.php;\n\n    location / {\n        try_files $uri $uri/ /index.php$is_args$args;\n    }\n}",
            "title": "Nginx"
        },
        {
            "location": "/routing/",
            "text": "Legato Framework router is a simple implementation of AltoRouter use \nfor routing HTTP Request. \n\n\nWhere to Define Your Application Routes\n\n\nYou should define your routes inside routes.php file which is located in the routes folder when you install a fresh copy of Legato there will be one route defined like so \n\n\n\n<?php\n\n# routes/routes.php\n/**\n * Your application routes go here\n */\n\nuse Legato\\Framework\\Routing\\Route;\n\n/**\n    * @param target, \n    * @param handler, fully qualified classname and method or Closure \n    * @param name (optional) must be unique for each route, \n */\n\nRoute::get('/', 'App\\Controllers\\IndexController@show', 'homepage');\n\nRoute::get('/user/{id}', function ($id) {\n    echo 'Example route using closure '.$id;\n});\n\n\n\n\nRoute with Closure or Callback\n\n\nYou can also define a route that uses a Closure or callback as the handler like so\n\n\n\n<?php\n\nRoute::get('/user/[i:id]', function ($id) {\n    echo 'Example route using closure '.$id;\n});\n\n\n\n\n\nRoute Controller\n\n\n\n<?php\n\nRoute::post('/contact', 'App\\Controllers\\ContactController@save');\n\n\n\n\n\nWhen you define a controller route, you should also specify \nthe fully qualified name of a controller and method that \nwill be executed for example for the route /contact the \ncontroller is ContactController while the method to be \nexecuted is save, \nApp\\Controllers\\ContactController@save\n\n\nDefining GET Routes\n\n\n\n<?php\n/**\n    * @param target, \n    * @param handler, fully qualified classname and method or Closure \n    * @param name (optional) must be unique for each route, \n */\n\nRoute::get('/', 'App\\Controllers\\IndexController@show');\n\n\n\n\n\nDefining POST Routes\n\n\n\n<?php\n/**\n    * @param target, \n    * @param handler, fully qualified classname and method or Closure \n    * @param name (optional) must be unique for each route, \n */\n\nRoute::post('/contact', 'App\\Controllers\\ContactController@save', 'contact_use');\n\n\n\n\n\nThe Legato Route class supports all major HTTP Verbs (POST, GET, PUT, PATCH, DELETE) for example to create a route with PATCH HTTP verb simple do the following\n\n\n\n<?php \n/**\n    * @param target, \n    * @param handler, fully qualified classname and method or Closure \n    * @param name (optional) must be unique for each route, \n */\n\nRoute::patch('/profile', 'App\\Controllers\\ProfileController@update');\n\n\n\n\n\nDefining Route Group\n\n\n\n<?php\n\n/**\n    * @param target, \n    * @param handler, fully qualified classname and method or Closure \n    * @param name (optional) must be unique for each route, \n */\n\nRoute::group('/admin', function (){\n    Route::add('GET', '/dashboard', 'controller@stop', 'admin_dashboard');\n    Route::add('POST', '/users', 'controller@users', 'admin_users');\n\n    Route::add('GET', '/user/[i:id]', function($id) { \n             echo  'get user with Id: '. $id;\n     }, 'admin_view_user');\n});\n\n\n\n\n\nDefining Route Resource\n\n\nIf you are using Legato 1.1.0 you can use the resource method \nto create RESTFul route\n\n\n<?php\n\nRoute::resource('/profile', 'ProfileController');\n\n\n\n\n\nthis will generate the following routes and expected methods:\n\n\n\nVerb       URI                       Method             Route Name\n\nGET        /profile                  index              profile_index\nGET        /profile/create           showCreateForm     profile_create_form\nPOST       /profile                  save               profile_save\nGET        /profile/[i:id]           show               profile_display\nGET        /profile/[i:id]/edit      showEditForm       profile_edit_form\nPOST       /profile/[i:id]           update             profile_update\nGET        /profile/[i:id]/delete    delete             profile_delete\n\n\n\n\n\nYou should then create all the methods in your controller, this can be done using \nthe Legato commandline tool or manually, if you choose to use the commandline tool then:\n\n\nphp legato add:controller ProfileController --restful=true\n\n\nThe above command will create a ProfileController controller with the content below:\n\n\n\n<?php\n\nnamespace App\\Controllers;\n\nclass ProfileController extends BaseController\n{\n    /**\n    * display all profiles\n    */\n    public function index()\n    {\n        //\n    }\n\n    /**\n    * Display the form to create a \n    */\n    public function showCreateForm()\n    {\n        //\n    } \n\n    /**\n    * Save the resource  \n    */\n    public function save()\n    {\n        //\n    }\n\n    /**\n    * Display a specific resource \n    *   \n    * @param $id\n     */\n    public function show($id)\n    {\n        //\n    }\n\n    /**\n    * Show the form to edit the resource\n    * \n    * @param $id\n     */\n    public function showEditForm($id)\n    {\n\n    }\n\n    /**\n    * Update the specified resource\n    * \n    * @param $id\n     */\n    public function update($id)\n    {\n\n    }\n\n    /**\n    * Delete the specified resource\n    * \n    * @param $id\n     */\n    public function delete($id)\n    {\n\n    }\n}",
            "title": "Routing"
        },
        {
            "location": "/routing/#where-to-define-your-application-routes",
            "text": "You should define your routes inside routes.php file which is located in the routes folder when you install a fresh copy of Legato there will be one route defined like so   \n<?php\n\n# routes/routes.php\n/**\n * Your application routes go here\n */\n\nuse Legato\\Framework\\Routing\\Route;\n\n/**\n    * @param target, \n    * @param handler, fully qualified classname and method or Closure \n    * @param name (optional) must be unique for each route, \n */\n\nRoute::get('/', 'App\\Controllers\\IndexController@show', 'homepage');\n\nRoute::get('/user/{id}', function ($id) {\n    echo 'Example route using closure '.$id;\n});",
            "title": "Where to Define Your Application Routes"
        },
        {
            "location": "/routing/#route-with-closure-or-callback",
            "text": "You can also define a route that uses a Closure or callback as the handler like so  \n<?php\n\nRoute::get('/user/[i:id]', function ($id) {\n    echo 'Example route using closure '.$id;\n});",
            "title": "Route with Closure or Callback"
        },
        {
            "location": "/routing/#route-controller",
            "text": "<?php\n\nRoute::post('/contact', 'App\\Controllers\\ContactController@save');  When you define a controller route, you should also specify \nthe fully qualified name of a controller and method that \nwill be executed for example for the route /contact the \ncontroller is ContactController while the method to be \nexecuted is save,  App\\Controllers\\ContactController@save",
            "title": "Route Controller"
        },
        {
            "location": "/routing/#defining-get-routes",
            "text": "<?php\n/**\n    * @param target, \n    * @param handler, fully qualified classname and method or Closure \n    * @param name (optional) must be unique for each route, \n */\n\nRoute::get('/', 'App\\Controllers\\IndexController@show');",
            "title": "Defining GET Routes"
        },
        {
            "location": "/routing/#defining-post-routes",
            "text": "<?php\n/**\n    * @param target, \n    * @param handler, fully qualified classname and method or Closure \n    * @param name (optional) must be unique for each route, \n */\n\nRoute::post('/contact', 'App\\Controllers\\ContactController@save', 'contact_use');  The Legato Route class supports all major HTTP Verbs (POST, GET, PUT, PATCH, DELETE) for example to create a route with PATCH HTTP verb simple do the following  \n<?php \n/**\n    * @param target, \n    * @param handler, fully qualified classname and method or Closure \n    * @param name (optional) must be unique for each route, \n */\n\nRoute::patch('/profile', 'App\\Controllers\\ProfileController@update');",
            "title": "Defining POST Routes"
        },
        {
            "location": "/routing/#defining-route-group",
            "text": "<?php\n\n/**\n    * @param target, \n    * @param handler, fully qualified classname and method or Closure \n    * @param name (optional) must be unique for each route, \n */\n\nRoute::group('/admin', function (){\n    Route::add('GET', '/dashboard', 'controller@stop', 'admin_dashboard');\n    Route::add('POST', '/users', 'controller@users', 'admin_users');\n\n    Route::add('GET', '/user/[i:id]', function($id) { \n             echo  'get user with Id: '. $id;\n     }, 'admin_view_user');\n});",
            "title": "Defining Route Group"
        },
        {
            "location": "/routing/#defining-route-resource",
            "text": "If you are using Legato 1.1.0 you can use the resource method \nto create RESTFul route  <?php\n\nRoute::resource('/profile', 'ProfileController');  this will generate the following routes and expected methods:  \nVerb       URI                       Method             Route Name\n\nGET        /profile                  index              profile_index\nGET        /profile/create           showCreateForm     profile_create_form\nPOST       /profile                  save               profile_save\nGET        /profile/[i:id]           show               profile_display\nGET        /profile/[i:id]/edit      showEditForm       profile_edit_form\nPOST       /profile/[i:id]           update             profile_update\nGET        /profile/[i:id]/delete    delete             profile_delete  You should then create all the methods in your controller, this can be done using \nthe Legato commandline tool or manually, if you choose to use the commandline tool then:  php legato add:controller ProfileController --restful=true  The above command will create a ProfileController controller with the content below:  \n<?php\n\nnamespace App\\Controllers;\n\nclass ProfileController extends BaseController\n{\n    /**\n    * display all profiles\n    */\n    public function index()\n    {\n        //\n    }\n\n    /**\n    * Display the form to create a \n    */\n    public function showCreateForm()\n    {\n        //\n    } \n\n    /**\n    * Save the resource  \n    */\n    public function save()\n    {\n        //\n    }\n\n    /**\n    * Display a specific resource \n    *   \n    * @param $id\n     */\n    public function show($id)\n    {\n        //\n    }\n\n    /**\n    * Show the form to edit the resource\n    * \n    * @param $id\n     */\n    public function showEditForm($id)\n    {\n\n    }\n\n    /**\n    * Update the specified resource\n    * \n    * @param $id\n     */\n    public function update($id)\n    {\n\n    }\n\n    /**\n    * Delete the specified resource\n    * \n    * @param $id\n     */\n    public function delete($id)\n    {\n\n    }\n}",
            "title": "Defining Route Resource"
        }
    ]
}